#!/usr/bin/env bash

# Deploys mattschaff/master branch to test site, builds, and syncs to prod.
# To use a different branch, provide it as an argument.
# Can also specify both remote and branch, where
# 'origin' = mattschaff and 'dev' = upenn-glia.

if [ $# -gt 2 ]
then
    echo 'Too many arguments (syntax: fin deploy-prod [BRANCH=master])' >&2
    exit 1
fi

if [ -z "$PROJECT_ROOT" ]
then
    echo "Error: PROJECT_ROOT not defined. Run as 'fin restore-test-db'." >&2
    echo "Or, if you're not using Docksal, just define PROJECT_ROOT=<dir containing composer.json>" >&2
    exit 1
fi

if [ -z "$NEURONET_SSH_USER" ]
then
	read -rp "Enter your PMACS server username: "
	export NEURONET_SSH_USER=$REPLY
fi


# Identify which branch we're using
remote=origin
if [ $# -eq 2 ]
then
    remote=$1
    shift
fi

branch=master
if [ $# -eq 1 ]
then
    branch=$1
    shift
fi

# Check connection
echo "Checking that we're good to go..."
"$PROJECT_ROOT"/.docksal/commands/check-vpn || exit $?

drush=$PROJECT_ROOT/vendor/bin/drush

# Make sure the real site is back online after exiting
bring_prod_back_online()
{
    echo "Taking the prod site out of maintenance mode..."
    $drush @self.prod sset system.maintenance_mode FALSE
}

# Remember, this should be done before dumping/checking the states of databases
# to avoid race conditions.
echo "Putting both sites in maintenance mode..."
$drush @self.prod sset system.maintenance_mode TRUE
$drush @self.test sset system.maintenance_mode TRUE
trap bring_prod_back_online EXIT

# check whether prod or test site has unexported config
config_check_code=$(cat << EOF
	drush=\$(pwd)/../vendor/bin/drush &&

	if [ \$(\$drush config:status --format=list 2>/dev/null | wc -w) -ne 0 ];
	then
		exit 1;
	else
		exit 0;
	fi
EOF
)

check_config()
{
	if ! $drush @self."$1" ssh "$config_check_code" 2>/dev/null
	then
		echo "Warning: $1 DB does not match current config files!"
		echo "You should probably see if you need to commit a config file change before deploying, unless you know it can be discarded."

		select action in "Stop" "Continue"; do
			case $action in
				Stop ) exit 1;;
				Continue ) break;;
			esac
		done
	fi
}

echo "Checking whether config needs to be exported..."
check_config test
check_config prod

now=$(date +%F_%T)
prod_dump=/home/neuronet/backups/prod_$now.sql
echo "Backing up prod database to $prod_dump..."
if ! $drush @self.prod sql-dump --result-file="$prod_dump"
then
    echo "Prod dump failed - fix issue before continuing."
    exit 1
fi

prod_root=$($drush sa @self.prod --fields=root | grep -oP 'root: \K.*$')

# Deploy to test site and build
echo "Deploying $remote/$branch to the test site."

echo 'SSHing to test site...'
server_code=$(cat << EOF
    cd .. &&

    echo &&
    echo Checking out branch $remote/$branch on the test site... &&
    git fetch $remote &&
    git checkout -f $remote/$branch &&
    git reset --hard &&

    echo &&
    echo Running composer install... &&
    composer validate && composer install --prefer-dist --no-progress --no-suggest &&

    echo &&
    echo Updating test database... &&
    vendor/bin/drush updb -y &&

    echo &&
    echo Importing config on test site... &&
    vendor/bin/drush cim -y &&

    echo &&
    echo Taking the test site out of maintenance mode... &&
    vendor/bin/drush sset system.maintenance_mode FALSE &&

    echo Copying files to the prod site... &&
    rsync -a --delete $prod_root/../ /home/neuronet/deployments/prod_backup

    || exit 1 &&

    rsync -a --exclude-from=.rsyncexclude ./ $prod_root/.. &&
    
    cd $prod_root/.. &&
    composer drupal:scaffold &&
    
    echo &&
    echo Updating prod database... &&
    vendor/bin/drush updb -y &&

    echo &&
    echo Importing config on prod site... &&
    vendor/bin/drush cim -y &&

    echo Prod deployed! Make sure https://www.neuronetupenn.org looks right. && exit 0
    
    || echo Error updating database. &&
    cd $prod_root/.. &&
    rsync -a --delete /home/neuronet/deployments/prod_backup/ . &&
    vendor/bin/drush sql-drop -y &&
    vendor/bin/drush sql-query --file="$prod_dump" &&
    echo Prod files and database restored.
    || echo Error restoring prod files and database - must fix manually;
    exit 1
EOF
)

$drush @self.test --tty ssh "sudo -u neuronet bash -ic '$server_code'"
